@using BlazorTest.Infrastructure
@using BlazorTest.Infrastucture
@using MudBlazor

@typeparam TModel

@inject IJSRuntime JsRuntime

<MudSelect2Input T="@TModel"
                 Value="@SelectedValue"
                 ValueChanged="@OnSelectedValueChanged"
                 SelectedValues="@SelectedValues"
                 SelectedValuesChanged="@OnSelectedValuesChanged"
                 OnOpen="@OnOpenHandler"
                 OnClose="@OnCloseHandler"
                 Label="@Label"
                 AdornmentIcon="@AdornmentIcon"
                 Margin="@Margin"
                 Variant="@Variant"
                 MultiSelection="@MultiSelect"
                 Class="@Class"
                 InputClass="p-2"
                 Comparer="@(new EComparer<TModel>(TextField))"
                 ToStringFunc="@ObjectFormatter"
                 AnchorOrigin="Origin.BottomCenter">

    @if (_displaySearchField && !DisableSearch)
    {
        <input class="mud-custom-select-search ms-2 p-2"
               value="@_searchTerm"
               style="width: 98%; border-bottom: 2px solid rgb(28, 129, 72); font-size: 13px; outline:none !important"
               @oninput="@((ChangeEventArgs e) => OnFilterItems(e))"
               placeholder="جستجو"
               type="text"
               autofocus />
    }

    @if (_dataSource.Any())
    {
        if (_groupedDataSource.Any())
        {
            <MudGrid Style="width: 98%;">
                @foreach (IGrouping<string, TModel> group in _groupedDataSource)
                {
                    <MudItem class="w-100 ps-5 mt-2">
                        @if (_displaySearchField)
                        {
                            <strong class="w-100 mb-2 border-bottom border-solid">@group.Key</strong>
                        }

                        @foreach (TModel option in group)
                        {
                            <MudSelectItem Value="@option" />
                        }
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            foreach (TModel option in _dataSource)
            {
                <MudSelectItem Value="@option" />
            }
        }
    }

</MudSelect2Input>

@code {
    #region Fields

    bool _displaySearchField = false;
    string _searchTerm = string.Empty;
    string _selectedValue = string.Empty;
    List<TModel> _dataSource = new List<TModel>();
    List<IGrouping<string, TModel>> _groupedDataSource = new List<IGrouping<string, TModel>>();

    #endregion

    #region Parameters

    [Parameter]
    public string TextField { get; set; } = "";

    [Parameter]
    public string ValueField { get; set; } = "";

    [Parameter]
    public Func<TModel, string>? GroupField { get; set; } = null;

    [Parameter]
    public Margin Margin { get; set; } = Margin.Dense;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string InputClass { get; set; } = string.Empty;

    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public bool Immediate { get; set; } = true;

    [Parameter]
    public bool DisableSearch { get; set; } = false;

    [Parameter]
    public string AdornmentIcon { get; set; } = string.Empty;

    [Parameter]
    public Origin AncherOrigin { get; set; } = Origin.BottomCenter;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public bool MultiSelect { get; set; }

    [Parameter]
    public List<TModel> Options { get; set; } = new List<TModel>();

    [Parameter]
    public Func<TModel, string, bool>? FilterFunction { get; set; } = null;

    [Parameter]
    public Func<TModel, string>? ToStringFunc { get; set; } = null;

    [Parameter]
    public EventCallback<IEnumerable<TModel>> SelectedValuesChangedHandler { get; set; } = EventCallback<IEnumerable<TModel>>.Empty;

    [Parameter]
    public TModel SelectedValue { get; set; }

    [Parameter]
    public EventCallback<TModel> SelectedValueChanged { get; set; }

    [Parameter]
    public IEnumerable<TModel> SelectedValues { get; set; } = Enumerable.Empty<TModel>();

    [Parameter]
    public EventCallback<IEnumerable<TModel>> SelectedValuesChanged { get; set; }

    bool _valuesIsSet = false;

    #endregion

    #region Methods & EventHandlers

    protected override void OnParametersSet()
    {
        if (!_valuesIsSet)
        {
            if (typeof(TModel).IsEnum)
            {
                _dataSource = Options = Enum.GetValues(typeof(TModel)).Cast<TModel>().ToList();
            }
            else
            {
                _dataSource = Options;
            }

            _groupedDataSource = GroupedDataSource;

            _valuesIsSet = true;
        }
    }

    async Task OnSelectedValuesChanged(IEnumerable<TModel> selectedItems)
    {
        SelectedValues = selectedItems;
        await SelectedValuesChanged.InvokeAsync(SelectedValues);

        if (SelectedValuesChangedHandler.HasDelegate)
        {
            await SelectedValuesChangedHandler.InvokeAsync(SelectedValues);
        }
    }

    async Task OnSelectedValueChanged(TModel selectedValue)
    {
        SelectedValue = selectedValue;
        await SelectedValueChanged.InvokeAsync(SelectedValue);

        if (SelectedValuesChangedHandler.HasDelegate)
        {
            IEnumerable<TModel> items = Enumerable.Empty<TModel>();
            items.Append(SelectedValue);

            await SelectedValuesChangedHandler.InvokeAsync(items);
        }
    }

    void OnFilterItems(ChangeEventArgs e)
    {
        _searchTerm = e == null || e.Value == null ? string.Empty : e.Value?.ToString();

        if (FilterFunction != null)
        {
            _dataSource = Options.Where(w => FilterFunction.Invoke(w, _searchTerm)).ToList();
        }
        else
        {
            _dataSource = Options
                .Where(w => (string.IsNullOrEmpty(_searchTerm) || w.GetFieldValue(TextField).Contains(_searchTerm)) ||
                            (string.IsNullOrEmpty(_searchTerm) || GroupField is null || GroupField(w).Contains(_searchTerm))).ToList();
        }

        _groupedDataSource = GroupedDataSource;
    }

    List<IGrouping<string, TModel>> GroupedDataSource
    {
        get
        {
            if (GroupField is not null)
            {
                List<IGrouping<string, TModel>> groupedItems = _dataSource.GroupBy(GroupField).ToList();
                return groupedItems.Any() ? groupedItems : new List<IGrouping<string, TModel>>();
            }

            return _groupedDataSource;
        }
    }

    List<MudSelectItem<TModel>> MudSelectItems =>
        _dataSource.Select(option => new MudSelectItem<TModel> { Value = option }).ToList();

    async Task OnOpenHandler()
    {
        _displaySearchField = true;
    }

    void OnCloseHandler()
    {
        _displaySearchField = false;
        _searchTerm = string.Empty;
        OnFilterItems(new ChangeEventArgs { Value = string.Empty });
    }

    string ObjectFormatter(TModel model)
    {
        if (ToStringFunc != null)
        {
            return ToStringFunc.Invoke(model);
        }

        return model.GetFieldValue(TextField);
    }

    string MultiSelectionTextFormatter(List<string> items)
    {
        string formattedString = "";
        items.ForEach(f => { formattedString += $"{f.GetFieldValue(TextField)} -- "; });
        return formattedString;
    }

    #endregion
}